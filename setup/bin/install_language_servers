#! /usr/bin/env bash

# This file sets up my needed language servers
# Using `coc.nvim` as my client as of 05/27/2019
# `coc.nvim` has various extensions which are based on VSCode extensions and
# can provide additional functionality on top of LSP (or use a different
# protocol entirely in the case of `coc-tsserver`, see note below)
#
# <<<< currently used languages >>>>
#
# << installation handled by coc.nvim extensions >>
#
# - python - `coc-python` - https://github.com/neoclide/coc-python
#   - requires a little setup - https://github.com/neoclide/coc-python#get-start
# - typescript - `coc-tsserver` - https://github.com/neoclide/coc-tsserver
#   - does not conform to LSP (same server used by VSCode though, Microsoft
#     forgoing it's own protocol for now, probably tech debt)
#     https://github.com/microsoft/language-server-protocol-inspector/issues/42#issuecomment-479995275
#
# << installation in this file >>
#
# - bash - https://github.com/mads-hartmann/bash-language-server
# - rust
#   - `rls` (https://github.com/rust-lang/rls) works though is a little flaky
#   - `rust-analyzer` (https://github.com/rust-analyzer/rust-analyzer) seems
#     like the future of rust language-server support
#
# <<<< currently explicitly NOT used languages >>>>
#
# - ruby - https://github.com/castwide/solargraph is too flaky/times out to use

# bash
command -v npm > /dev/null 2>&1 || npm install --global bash-language-server

# rust - flaky, issues w/ formatting & linting
# install rustup, then requisite packages
# TODO: figure out best language server here
# ref - https://rustup.rs/
command -v rustup > /dev/null 2>&1 || {
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
  rustup component add rls rust-analysis rust-src
}
