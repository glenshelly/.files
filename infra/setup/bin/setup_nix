#! /usr/bin/env bash

# shellcheck disable=SC1090,SC2016

# check that DOTFILES variable is defined
source "${BASH_SOURCE%/*}/../check_dotfiles_variable.sh"

source "$DOTFILES/infra/scripts/prompts.sh"

main() {
  info 'setting up `nix` (manages these dotfiles)'

  setup_nix || exit 1

  setup_home_manager || exit 1

  success '`nix` (and various pieces) setup complete'
}

setup_nix() {
  command -v nix-env > /dev/null && {
    info 'skipping `nix` installation since `nix-env` is invokable'
    return 0
  }

  # macOS (as of Catalina) makes the root (`/`) read-only
  # `nix` can workaround this by creating a "synthetic" directory at `/nix` and
  # mounting a separate volume which holds the actual contents
  #
  # As the ref below points out, "unencrypted" is a bit of a misnomer. Any Mac
  # with a T2 chip will still be encrypted at rest
  #
  # ref - https://nixos.org/nix/manual/#sect-macos-installation
  local MAC_INSTALLATION_FLAGS
  "$DOTFILES/infra/scripts/is_macos.sh" && {
    MAC_INSTALLATION_FLAGS='--darwin-use-unencrypted-nix-store-volume'
  }

  # `--daemon` enables multiuser install
  # on multiuser install no need to source `nix` activation script, done by
  # daemon?
  # TODO: explain why multiuser and differences w/ single-user install
  # https://nixos.org/nix/manual/#sect-multi-user-installation
  sh <(curl -L https://nixos.org/nix/install) \
    --daemon \
    "$MAC_INSTALLATION_FLAGS"

  # initialize `nix` for next steps - same lines added to /etc/zshrc by installer
  if [ -e '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then
    # shellcheck disable=SC1091
    . '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
  fi

  command -v nix-env > /dev/null || {
    fail "Nix installation finished but the \`nix-env\` binary is not available.
 Please fix any issues and try again."
    return 1
  }

  success '`nix` installed'
}

setup_home_manager() {
  command -v home-manager > /dev/null && {
    info 'skipping `home-manager` installation since `home-manager` is invokable'
    return 0
  }

  # install home manager - https://github.com/rycee/home-manager#installation
  nix-channel --add \
    https://github.com/rycee/home-manager/archive/master.tar.gz \
    home-manager
  nix-channel --update

  # make home-manager available (also done on each shell load in zshrc)
  export NIX_PATH=$HOME/.nix-defexpr/channels${NIX_PATH:+:}$NIX_PATH

  # install & create first generation
  nix-shell '<home-manager>' -A install

  command -v home-manager > /dev/null || {
    fail "\`home-manager\` installation finished but the \`home-manager\`
 command is not invokable. Please fix any issues and try again."
    return 1
  }

  # switch to home-manager config
  home-manager switch || {
    fail '`home-manager` setup failed on `home-manager switch`'
    return 1
  }

  # symlink home config
  ln -sf "$DOTFILES/nix/home.nix" "$HOME/.config/nixpkgs/home.nix"

  success '`home-manager` setup complete'
}

main "$@"
