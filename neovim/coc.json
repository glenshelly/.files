// configuration file for `coc.nvim` - https://github.com/neoclide/coc.nvim
//
// this file must be symlinked to `$HOME/.config/nvim/coc-settings.json`
// this symlinking should occur through the install script
//
// can also be done manually:
// `ln -s $DOTFILES/neovim/coc.json $HOME/.config/nvim/coc-settings.json`
//
// Note: install script symlinking works by symlinking the existing symlink in
// `$DOTFILES/config/nvim`
//
// Note II: if you're using `coc` and have the json extension installed you may
// see errors due to these comments. To have `coc` treat them correctly use the
// command `:CocConfig` (`coc` seems to use the full path of the opened file as
// a heuristic for file behavior). This will also enable intelligent
// automcompletion of the possible configuration options
//
// ref - https://github.com/neoclide/coc.nvim/blob/master/data/schema.json
{
  "suggest.enablePreview": true,
  // "suggest.completionItemKindLabels": {}
  "diagnostic.virtualText": true,
  "diagnostic.virtualTextPrefix": " ~  ",
  "diagnostic.errorSign": "◉",
  "diagnostic.warningSign": "◉",
  "diagnostic.infoSign": "◉",
  "diagnostic.hintSign": "◉",

  // TODO: add more of these? - https://github.com/iamcco/coc-diagnostic
  "diagnostic-languageserver.filetypes": {
    "sh": "shellcheck"
  },

  // virtual text listing references & implementations
  "codeLens.enable": true,
  "codeLens.separator": "  ‣ ",
  "list.indicator": "λ",
  "list.nextKeymap": "<C-k>",
  "list.previousKeymap": "<C-l>",
  // "coc.preferences.jumpCommand": "drop", // or something else
  // "coc.preferences.bracketEnterImprove", // how is this supposed to work
  // "coc.preferences.formatOnType": true,
  // "coc.source.around" // TODO: understand sources better (buffer source?)
  // how to disable LS suggestions in comments like possible for other sources?
  // ref - https://github.com/neoclide/coc.nvim/wiki/Completion-with-sources
  "coc.source.file.ignoreHidden": false,
  "coc.preferences.formatOnSaveFiletypes": [
    "css",
    "graphql",
    "json",
    "markdown",
    "rust",
    "python",
    "typescript",
    "typescriptreact"
  ],

  // TODO: document what each of these looks like, understand why they don't
  // seem to be working exactly as expected
  // ref - https://github.com/neoclide/coc.nvim/pull/603
  "suggest.completionItemKindLabels": {
    "function": "\uf794",
    "method": "\uf6a6",
    "variable": "\uf71b",
    "constant": "\uf8ff",
    "struct": "\ufb44",
    "class": "\uf0e8",
    "interface": "\ufa52",
    "text": "\ue612",
    "enum": "\uf435",
    "enumMember": "\uf02b",
    "module": "\uf668",
    "color": "\ue22b",
    "property": "\ufab6",
    "field": "\uf93d",
    "unit": "\uf475",
    "file": "\uf471",
    "value": "\uf8a3",
    "event": "\ufacd",
    "folder": "\uf115",
    "keyword": "\uf893",
    "snippet": "\uf64d",
    "operator": "\uf915",
    "reference": "\uf87a",
    "typeParameter": "\uf278",
    "default": "\uf29c"
  },

  // <<<<<<<< language server specific settings >>>>>>>>


  // <<<< custom language servers >>>>
  // ref - https://github.com/neoclide/coc.nvim/wiki/Language-servers#register-custom-language-servers
  "languageserver": {
    // https://github.com/mads-hartmann/bash-language-server
    "bash": {
      "command": "bash-language-server",
      "args": ["start"],
      "filetypes": ["sh"],
      "ignoredRootPaths": ["~"]
    }
  },

  // <<<< tsserver >>>>
  // ref - https://github.com/neoclide/coc-tsserver#configuration-options
  "tsserver.enableJavascript": false,

  // <<<< python >>>>
  // ref - https://github.com/neoclide/coc-python#options

  // enables Microsoft PLS
  // ref - https://github.com/neoclide/coc-python#optional-steps
  "python.jediEnabled": false,
  "python.formatting.provider": "black",
  "python.linting.mypyEnabled": true,
  "python.linting.pylintEnabled": false
}
