# setup

# path to dotfiles
export DOTFILES=$HOME/.files

# source colors & prompt separate from rest of sourcing due to strict ordering
# results in redundant second sourcing but neglible performance hit
# source colors used in prompt
source $DOTFILES/zsh/spectrum.zsh
# source prompt
source $DOTFILES/zsh/prompt.zsh

# source antibody - static method
# loads static file that must be regenerated any time a new plugin is added
# regenerate by running the following (aliased to `antibundle` below):
#   `antibody bundle < "$DOTFILES/zsh/plugins.txt" > "$DOTFILES/zsh/plugins.sh"`
# refs:
#   - https://getantibody.github.io/#static-loading
#   - https://github.com/getantibody/antibody
source $DOTFILES/zsh/plugins.sh

# alias generation of plugins file (installation of new plugins)
local ANTIBUNDLE_IN="$DOTFILES/zsh/plugins.txt"
local ANTIBUNDLE_OUT="$DOTFILES/zsh/plugins.sh"
alias antibundle="antibody bundle < $ANTIBUNDLE_IN > $ANTIBUNDLE_OUT"
# remove created variables to avoid littering global scope
unset ANTIBUNDLE_IN ANTIBUNDLE_OUT

# load functions written as basic scripts
autoload -Uz $DOTFILES/functions/*(:t)


# set default editors (source here before other files that make use of these)
# technically only aliasing $VISUAL is necessary but $EDITOR is used elsewhere
# in these dotfiles and should be `nvim`
export VISUAL=nvim
export EDITOR=nvim

# all zsh files
typeset -U config_files

# enable `extended_glob` to pattern match & exclude `submodules` directory
# disable immediately after to respect options in `options.zsh`
# TODO: avoid `extended_glob` hack
# must be some way to exclude `submodules` directory w/o `extended_glob` set
setopt extended_glob
# TODO: exclude `spectrum.zsh` & `prompt.zsh` to avoid unnecessary double source
config_files=($DOTFILES/**/*.zsh~*submodules*)
setopt noextended_glob

# load path files
for file in ${(M)config_files:#*/path.zsh}
do
  source $file
done

# load !path && !completion files
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}
do
  source $file
done

# after setting fpath
# load functions (such as manydots)
# that need to be run to take effect
_execute_functions

# start autocomplete
autoload -Uz compinit

# use cache for compinit
# TODO: profile this to see how much of a difference it actually makes
# ref - https://blog.callstack.io/supercharge-your-terminal-with-zsh-8b369d689770
typeset -i updated_at=$(date +'%j' -r ~/.zcompdump 2>/dev/null \
  || stat -f '%Sm' -t '%j' ~/.zcompdump 2>/dev/null)
if [ $(date +'%j') != $updated_at ]; then
  compinit -i
else
  compinit -C -i
fi

# load completion files
for file in ${(M)config_files:#*/completion.zsh}
do
  source $file
done

unset config_files
